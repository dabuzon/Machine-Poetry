void settings() {
  fullScreen();
}

void setup() {
  font = createFont("OCRB.otf", width/50);
  standAlones = loadStrings("standAlones.txt");
  inserts = loadStrings("inserts.txt");

  textFont(font);
  textSize(72);
  textLeading(72);

  inputPoems = new StringList();
  inputMiddle = new StringList();
}

void draw() {
  background(0);
  textAlign(CENTER);
  fill(#28FE14);

  if (pageIndex == 1) {
    text("WHAT ARE YOU?", width/4, height/8, width/2, height/2);
    text("ENTER A SINGLE WORD", width/4, height/5, width/2, height/2);
    text(typing.toUpperCase(), width/2, height/1.5);
  } else if (pageIndex == 2) {
    // TIME STARTS
    int ms = millis() - start;
    int sec = ms/1000;

    if (sec < 3) {
      text("DO NOT TOUCH ME", width/4, height/8, width/2, height/2);
      text("I AM WRITING POETRY", width/4, height/5, width/2, height/2);
    } else if (sec >= 3 && sec < 6) {
      text("", width/4, height/4, width/2, height/2);
    } else if (sec >= 6 && sec < 15) {
      text(inputPoems.get(r).toUpperCase(), width/4, height/6, width/2, height/2);
      text(inserts[rIn].toUpperCase(), width/4, height/2.5, width/2, height/2);
      text(inputPoems.get(rTwo).toUpperCase(), width/4, height/1.5, width/2, height/2);
    } else if (sec >= 15 && sec < 20) {
      if (inputPoems.size() < 1) {
      } else {
      }
      text("YOU HAVE BECOME POETRY", width/2, height/2.5);
    } else if (sec >= 20) {
      pageIndex--;
    }
  };
}

void keyPressed() {
  if (key == '\n' && pageIndex == 1) {
    saved = typing;
    saved = saved.toUpperCase();
    typing = "";
    pageIndex++;
    start = millis();

    for (int i = 0; i < standAlones.length; i++) {
      String line = standAlones[i];
      //String stLine = strip(line);
      String[] check = split(line, " ");

      for (int j = 0; j < check.length; j++) {
        String word = check[j];
        word = word.toUpperCase();
        //println(word);
        if (saved.equals(word)) {
          inputPoems.append(line);
          break;
        } else if (inputPoems.size() < 1) {
          // inputPoems is just the whole array

          // this line is just temporary. Need to write the actual alternative.
          //inputPoems.append(standAlones);
          //break;
          //for (int n = 0; n < inserts.length; n++) {
          //  String iLine = inserts[n];
          //  String[] iCheck = split(iLine, " ");

          //  for (int o = 0; o < iCheck.length; o++) {
          //    String iWord = iCheck[o];
          //    iWord = iWord.toUpperCase();
          //    if (saved.equals(iWord)) {

          //    }
          //  }
          //}
        }
      }
    }

    rIn = int(random(inserts.length));
    r = int(random(inputPoems.size()));
    for (int k = 0; k < 5; k++) {
      rTwo = int(random(inputPoems.size()));
      if (r != rTwo) {
        break;
      }
    }
  } else if (key >= 65 && key <= 90 || key >= 97 && key <= 122) {
    typing = typing + key;
  } else if (key == BACKSPACE) {
    typing = typing.substring(0, typing.length() - 1);
  }
}
